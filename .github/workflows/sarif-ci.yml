name: Sarif CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  analyze-codeql:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        #language: [ 'java-kotlin', 'swift' ]
        language: [ 'java-kotlin' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      #- run: ./gradlew assembleDebug

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          #category: "/language:${{matrix.language}}"
          category: "codeql:${{matrix.language}}"

  #      - uses: actions/upload-artifact@v3
  #        with:
  #          path: /home/runner/work/sarif-android-sample7/results
  #          #path: /home/runner/work/sarif-android-sample/results/java.sarif

  analyze-qodana:
    runs-on: ubuntu-latest
    permissions:
      # https://www.jetbrains.com/help/qodana/github.html
      # contents: write # コードの自動修正機能を使わないなら（恐らく）不要
      # pull-requests: write # プルリクにサマリーをpostしない（post-pr-comment: false）なら不要
      # checks: write # annotationしない（use-annotations: false）ならchecksは動かないので不要

      # 参考 https://docs.github.com/ja/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      #     https://docs.github.com/ja/code-security/code-scanning/troubleshooting-code-scanning/resource-not-accessible
      security-events: write # プルリクでは不要(pushではpublicリポジトリでもwrite権限が無いとactionがエラーとなる)
      actions: read # privateリポジトリでは必要（権限ないとactionがエラーとなる）
      contents: read # privateリポジトリでは必要（無いときの挙動は試してないがそもそもコードのチェックアウトで必要）
    steps:
      - uses: actions/checkout@v4
        # with:
        #   # ref: ${{ github.event.pull_request.head.sha }} # どのコードを解析するか。プルリクではheadでなくマージコミットでもよいと思う
        #   # fetch-depth: 0  # pr-mode のときに必要（0でない場合はエラーにはならないがプルリクでも全ファイル検査となる）
      - name: 'Qodana Scan'
        uses: JetBrains/qodana-action@v2023.3
        # env:
        #   QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }} # Qodanaのダッシュボードと連携する場合
        with:
          post-pr-comment: false
          use-annotations: false
          pr-mode: false
      - run: |
          cat '${{ runner.temp }}/qodana/results/qodana.sarif.json' \
            | jq 'del(.runs[].automationDetails)' \
            > '${{ runner.temp }}/qodana.sarif'
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ runner.temp }}/qodana.sarif'
          category: 'qodana:jvm-android'

  analyze-mobsfscan:
    runs-on: ubuntu-latest
    permissions:
      # 参考 https://docs.github.com/ja/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
      security-events: write # プルリクでは不要 https://docs.github.com/ja/code-security/code-scanning/troubleshooting-code-scanning/resource-not-accessible
      actions: read # privateリポジトリでは必要
      contents: read # privateリポジトリでは必要
    steps:
      - uses: actions/checkout@v4

      - uses: MobSF/mobsfscan@main
        with:
          args: '. --sarif --output results.sarif'
        continue-on-error: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: 'mobsfscan'
